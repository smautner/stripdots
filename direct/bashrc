#interactive shells...
if [ -z "$SSH_CLIENT" ];then
    #######################
    # fixing the shell on annoying systems / and annoying defaults
    #######################
	export EDITOR="vim" # sometimes systems try pico...
	which nvim && export EDITOR='nvim'
    # strg+s/q do weird legacy stuff... disable
    #bind -r '\C-s'
    #stty -ixon
fi

alias vi='vim'  # for some systems this is not default
shopt -s histappend
PS1='\[\e[1;33m\]\h\[\e[1;30m\]`date +"%H%M"`\u:\[\e[0;0m\]\W\$\[\e[0m\] '

alias ls='ls --color=auto --time-style="+%F %H:%M" --group-directories-first --ignore "*.pyc" '

# F zeichen am ende; G no group ;  t sort, r reverse
alias ll='ls -alhGF '
alias l='ls -FGltrh'
alias ..="cd ..;l"
alias ...="cd ../..;l"
#dumps anschaun???
alias httpy='python -m SimpleHTTPServer 8765' # http.server @ py3
alias tmuxa='tmux attach -t '
alias tmuxn='tmux new -s '



function t(){
    if [ "$#" -eq 1 ]; then
        tmux has-session -t $1
        if [ $? -eq 0 ]; then
                tmuxa $1
            else
                tmuxn $1
        fi
    else
        tmux ls
    fi
}


test -f $HOME/.bash_local && source $HOME/.bash_local



# CONDA
export PATH="$HOME/.myconda/miniconda2/bin:$HOME/.myconda/miniconda3/bin:$PATH"

function getconda(){

    # on crap cluster, tmp is not executable... so we do this..
    cd
    mkdir tmp
    export TMPDIR=$HOME/tmp

    # actual installation
    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
    sh Miniconda3-latest-Linux-x86_64.sh -b -p $HOME/.myconda/miniconda3
    conda config --add channels defaults
    conda config --add channels bioconda
    conda config --add channels conda-forge

    # we can also install some programs
	for i in tmux git;
         do which $i || conda install $i ; done

    pip install ranger-fm

}

function getnvim(){
    wget https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage -O $HOME/.bin/nvim
    chmod +x $HOME/.bin/nvim
    pip install jedi-language-server neovim
    echo "install a c compiler for treesitter"
}

function twofa(){
    # packet: oath-toolkit
    set oauth $(oathtool  --totp -d6 -b key4_2FactorAuth)
    set pass 'passwd for sshkey'

    expect -c "
        set timeout 5
        spawn ssh ASDASD -J ASDASD
        expect \"Enter passphrase for key '~/.ssh/SSHKEY': \"
        send \"$pass\r\"
        expect \"One-time password (OATH) for \`USERNAME': \"
        send \"$oauth\r\"
        interact
    "
end

}

# tmux needs this in case of fish
#export SHELL=$(which fish)

